<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>2</version>
  <attributes/>
  <visualElements>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>PC</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>clk,rst,writeEn,PC_in:32</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity PC is
    Port (
        clk     : in  STD_LOGIC;                     -- Clock
        rst     : in  STD_LOGIC;                     -- Reset síncrono
        writeEn : in  STD_LOGIC;                     -- Habilitação de escrita
        PC_in   : in  STD_LOGIC_VECTOR(31 downto 0); -- Próximo valor do PC
        PC_out  : out STD_LOGIC_VECTOR(31 downto 0)  -- Valor atual do PC
    );
end PC;

architecture Behavioral of PC is
    signal PC_reg : STD_LOGIC_VECTOR(31 downto 0);
begin

    process(clk)
    begin
        if rising_edge(clk) then
            if rst = &apos;1&apos; then -- zera o PC caso reset for ativado
                PC_reg &lt;= (others =&gt; &apos;0&apos;);
            elsif writeEn = &apos;1&apos; then -- atualiza o PC writeEn estiver habilitado
                PC_reg &lt;= PC_in;
            end if;
        end if;
    end process;

    PC_out &lt;= PC_reg;

end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>PC_out:32</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>4</int>
        </entry>
      </elementAttributes>
      <pos x="100" y="260"/>
    </visualElement>
    <visualElement>
      <elementName>Clock</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>CLK</string>
        </entry>
      </elementAttributes>
      <pos x="-120" y="440"/>
    </visualElement>
    <visualElement>
      <elementName>D_FF</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>FFD</string>
        </entry>
      </elementAttributes>
      <pos x="-60" y="-20"/>
    </visualElement>
    <visualElement>
      <elementName>Counter</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>Contador</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>8</int>
        </entry>
      </elementAttributes>
      <pos x="20" y="420"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
      </elementAttributes>
      <pos x="-40" y="220"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="-120" y="-180"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes/>
      <pos x="-20" y="380"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Value</string>
          <long>0</long>
        </entry>
      </elementAttributes>
      <pos x="-100" y="-20"/>
    </visualElement>
    <visualElement>
      <elementName>ROM</elementName>
      <elementAttributes>
        <entry>
          <string>AddrBits</string>
          <int>24</int>
        </entry>
        <entry>
          <string>Label</string>
          <string>ROM</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="320" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>Somador</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>A:32,B:32</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity Somador is
    Port (
        A : in  STD_LOGIC_VECTOR(31 downto 0);  -- Entrada A
        B : in  STD_LOGIC_VECTOR(31 downto 0);  -- Entrada B
        Z : out STD_LOGIC_VECTOR(31 downto 0)   -- Saída Z (A + B)
    );
end Somador;

architecture Behavioral of Somador is
begin
    -- Atribuição direta: Z é a soma de A e B
    Z &lt;= std_logic_vector(unsigned(A) + unsigned(B));
end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>Z:32</string>
        </entry>
      </elementAttributes>
      <pos x="240" y="-120"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="120" y="-80"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>32</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>24</string>
        </entry>
      </elementAttributes>
      <pos x="260" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>8</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>0-0</string>
        </entry>
      </elementAttributes>
      <pos x="120" y="420"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>IFID</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>clk,writeEnable,pcIn:32,pcP4In:32,instIn:32</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity IFID is
    Port (
        clk          : in  STD_LOGIC;
        writeEnable  : in  STD_LOGIC;
        pcIn         : in  STD_LOGIC_VECTOR(31 downto 0);
        pcP4In       : in  STD_LOGIC_VECTOR(31 downto 0);
        instIn       : in  STD_LOGIC_VECTOR(31 downto 0);
        pcout        : out STD_LOGIC_VECTOR(31 downto 0);
        pcP4out      : out STD_LOGIC_VECTOR(31 downto 0);
        instOut      : out STD_LOGIC_VECTOR(31 downto 0)
    );
end IFID;

architecture Behavioral of IFID is
    signal IDIF : STD_LOGIC_VECTOR(95 downto 0); -- registrador do pipeline
begin

    process(clk)
    begin
        -- Borda de subida: armazena dados no pipeline
        if rising_edge(clk) then
            if writeEnable = &apos;0&apos; then
                -- Guardar a instrução
                IDIF(31 downto 0)   &lt;= instIn;

                -- Guardar PC atual
                IDIF(63 downto 32)  &lt;= pcIn;

                -- Guardar PC + 4
                IDIF(95 downto 64)  &lt;= pcP4In;
            end if;
        end if;

        -- Borda de descida: envia dados armazenados para os estágios seguintes
        if falling_edge(clk) then
            -- Saída do PC atual
            pcout     &lt;= IDIF(63 downto 32);

            -- Saída da instrução
            instOut   &lt;= IDIF(31 downto 0);

            -- Saída do PC + 4
            pcP4out   &lt;= IDIF(95 downto 64);
        end if;
    end process;

end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>pcout:32,pcP4out:32,instOut:32</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>10</int>
        </entry>
      </elementAttributes>
      <pos x="480" y="260"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>Hazard</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>clk,MemReadEX,RDEX:5,RSrc1:5,RSrc2:5</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.std_logic_1164.all;

entity Hazard is
    port (
        clk       : in  std_logic;
        MemReadEX : in  std_logic;
        RDEX      : in  std_logic_vector(4 downto 0);
        RSrc1     : in  std_logic_vector(4 downto 0);
        RSrc2     : in  std_logic_vector(4 downto 0);
        stall     : out std_logic
    );
end entity Hazard;

architecture Behavioral of Hazard is
    signal stall_interno : std_logic := &apos;0&apos;;
begin
    process(clk)
    begin
        if rising_edge(clk) then
            if (MemReadEX = &apos;1&apos;) and ((RDEX = RSrc1) or (RDEX = RSrc2)) then
                stall_interno &lt;= &apos;1&apos;;  -- Aplica stall se houver dependência
            else
                stall_interno &lt;= &apos;0&apos;;  -- Caso contrário, continua normal
            end if;
        end if;
    end process;

    stall &lt;= stall_interno;
end architecture Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>stall</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>8</int>
        </entry>
      </elementAttributes>
      <pos x="740" y="760"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>32</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>0-6,7-11,12-14, 15-19,20-24,30-30</string>
        </entry>
      </elementAttributes>
      <pos x="780" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>0-2,1</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>4</string>
        </entry>
      </elementAttributes>
      <pos x="860" y="340"/>
    </visualElement>
    <visualElement>
      <elementName>Probe</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>Ponta de Prova</string>
        </entry>
      </elementAttributes>
      <pos x="500" y="440"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>register_file</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>clk,input:32,regSelA:5,regSelB:5,writeRegSel:5,regSelManual:5,writeEnable</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity register_file is
    Port (
        clk           : in  STD_LOGIC;
        input         : in  STD_LOGIC_VECTOR(31 downto 0);
        regSelA       : in  STD_LOGIC_VECTOR(4 downto 0);
        regSelB       : in  STD_LOGIC_VECTOR(4 downto 0);
        writeRegSel   : in  STD_LOGIC_VECTOR(4 downto 0);
        regSelManual  : in  STD_LOGIC_VECTOR(4 downto 0);
        writeEnable   : in  STD_LOGIC;
        outA          : out STD_LOGIC_VECTOR(31 downto 0);
        outB          : out STD_LOGIC_VECTOR(31 downto 0);
        outRegManual  : out STD_LOGIC_VECTOR(31 downto 0)
    );
end register_file;

architecture Behavioral of register_file is
    type reg_array is array (0 to 31) of STD_LOGIC_VECTOR(31 downto 0);
    signal registers : reg_array := (others =&gt; (others =&gt; &apos;0&apos;));
begin

    process(clk)
    begin
        if rising_edge(clk) then
            -- Leitura de A
            if registers(to_integer(unsigned(regSelA))) = &quot;UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU&quot; then
                outA &lt;= (others =&gt; &apos;0&apos;);  -- Caso &apos;U&apos;, retorna zero
            else
                outA &lt;= registers(to_integer(unsigned(regSelA)));
            end if;

            -- Leitura de B
            if registers(to_integer(unsigned(regSelB))) = &quot;UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU&quot; then
                outB &lt;= (others =&gt; &apos;0&apos;);
            else
                outB &lt;= registers(to_integer(unsigned(regSelB)));
            end if;
        end if;
    end process;

    -- Escrita na borda de descida + bypass
    process(clk)
    begin
        if falling_edge(clk) then
            if writeEnable = &apos;1&apos; then
                registers(to_integer(unsigned(writeRegSel))) &lt;= input;

                -- Bypass para leitura A
                if regSelA = writeRegSel then
                    outA &lt;= input;
                end if;

                -- Bypass para leitura B
                if regSelB = writeRegSel then
                    outB &lt;= input;
                end if;
            end if;
        end if;
    end process;

    -- Leitura manual de um registrador
    outRegManual &lt;= registers(to_integer(unsigned(regSelManual)));

end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>outA:32,outB:32,outRegManual:32</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>10</int>
        </entry>
      </elementAttributes>
      <pos x="1080" y="240"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>ImmGen</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>inst:32</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity ImmGen is
    Port (
        inst : in  STD_LOGIC_VECTOR(31 downto 0);  -- Instrução completa (32 bits)
        imm  : out STD_LOGIC_VECTOR(31 downto 0)   -- Imediato estendido
    );
end ImmGen;

architecture Behavioral of ImmGen is
    signal opcode : STD_LOGIC_VECTOR(6 downto 0);
begin
    opcode &lt;= inst(6 downto 0);

    process(inst, opcode)
        variable imm_temp : signed(31 downto 0);
    begin
        case opcode is

            -- Tipo I (ex: addi, lw)
            when &quot;0010011&quot; | &quot;0000011&quot; | &quot;1100111&quot; =&gt;
                imm_temp := resize(signed(inst(31 downto 20)), 32);

            -- Tipo S (ex: sw)
            when &quot;0100011&quot; =&gt;
                imm_temp := resize(signed(inst(31 downto 25) &amp; inst(11 downto 7)), 32);

            -- Tipo B (ex: beq, bne)
            when &quot;1100011&quot; =&gt;
                imm_temp := resize(signed(
                    inst(31) &amp;          -- bit 12 (MSB)
                    inst(7) &amp;           -- bit 11
                    inst(30 downto 25) &amp;-- bits 10-5
                    inst(11 downto 8) &amp; -- bits 4-1
                    &apos;0&apos;                 -- LSB sempre zero (byte-aligned)
                ), 32);

            -- Tipo U (ex: lui, auipc)
            when &quot;0110111&quot; | &quot;0010111&quot; =&gt;
                imm_temp := signed(inst(31 downto 12) &amp; x&quot;000&quot;);

            -- Tipo J (ex: jal)
            when &quot;1101111&quot; =&gt;
                imm_temp := resize(signed(
                    inst(31) &amp;                  -- bit 20
                    inst(19 downto 12) &amp;        -- bits 19-12
                    inst(20) &amp;                  -- bit 11
                    inst(30 downto 21) &amp;        -- bits 10-1
                    &apos;0&apos;                         -- LSB
                ), 32);

            -- Default: zero
            when others =&gt;
                imm_temp := (others =&gt; &apos;0&apos;);

        end case;

        imm &lt;= std_logic_vector(imm_temp);
    end process;

end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>imm:32</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>6</int>
        </entry>
      </elementAttributes>
      <pos x="1080" y="460"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>Control_Unit</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>opcode:7</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity Control_Unit is
    port(
        opcode                     : in  std_logic_vector(6 downto 0);
        AluSrc, blockA, RegWrite   : out std_logic;
        MemRead, MemWrite, Branch  : out std_logic;
        BranchNotEq, BrIncond      : out std_logic;
        regToPC                    : out std_logic;
        AluOp, regSrc              : out std_logic_vector(1 downto 0)
    );
end Control_Unit;

architecture Behavioral of Control_Unit is
begin
    process(opcode)
    begin
        -- Valores padrão (para segurança)
        AluSrc      &lt;= &apos;0&apos;;
        blockA      &lt;= &apos;0&apos;;
        RegWrite    &lt;= &apos;0&apos;;
        MemRead     &lt;= &apos;0&apos;;
        MemWrite    &lt;= &apos;0&apos;;
        Branch      &lt;= &apos;0&apos;;
        BranchNotEq &lt;= &apos;0&apos;;
        BrIncond    &lt;= &apos;0&apos;;
        regToPC     &lt;= &apos;0&apos;;
        AluOp       &lt;= &quot;00&quot;;
        regSrc      &lt;= &quot;00&quot;;

        case opcode is
            -- Tipo R (add, sub, etc.)
            when &quot;0110011&quot; =&gt;
                AluSrc   &lt;= &apos;0&apos;;
                blockA   &lt;= &apos;0&apos;;
                RegWrite &lt;= &apos;1&apos;;
                AluOp    &lt;= &quot;10&quot;;
                regSrc   &lt;= &quot;00&quot;;

            -- Tipo I (addi, andi, etc.)
            when &quot;0010011&quot; =&gt;
                AluSrc   &lt;= &apos;1&apos;;
                blockA   &lt;= &apos;0&apos;;
                RegWrite &lt;= &apos;1&apos;;
                AluOp    &lt;= &quot;11&quot;;
                regSrc   &lt;= &quot;00&quot;;

            -- Tipo S (sw)
            when &quot;0100011&quot; =&gt;
                AluSrc    &lt;= &apos;1&apos;;
                blockA    &lt;= &apos;0&apos;;
                RegWrite  &lt;= &apos;0&apos;;
                MemWrite  &lt;= &apos;1&apos;;
                AluOp     &lt;= &quot;00&quot;;
                regSrc    &lt;= &quot;00&quot;;

            -- Tipo I (lw)
            when &quot;0000011&quot; =&gt;
                AluSrc    &lt;= &apos;1&apos;;
                blockA    &lt;= &apos;0&apos;;
                RegWrite  &lt;= &apos;1&apos;;
                MemRead   &lt;= &apos;1&apos;;
                AluOp     &lt;= &quot;00&quot;;
                regSrc    &lt;= &quot;00&quot;;

            -- beq
            when &quot;1100111&quot; =&gt;
                AluSrc    &lt;= &apos;0&apos;;
                blockA    &lt;= &apos;0&apos;;
                Branch    &lt;= &apos;1&apos;;
                AluOp     &lt;= &quot;01&quot;;
                regSrc    &lt;= &quot;00&quot;;

            -- bne
            when &quot;1100011&quot; =&gt;
                AluSrc       &lt;= &apos;0&apos;;
                blockA       &lt;= &apos;0&apos;;
                Branch       &lt;= &apos;1&apos;;
                BranchNotEq  &lt;= &apos;1&apos;;
                AluOp        &lt;= &quot;01&quot;;
                regSrc       &lt;= &quot;00&quot;;

            -- jal
            when &quot;1101111&quot; =&gt;
                AluSrc    &lt;= &apos;1&apos;;
                blockA    &lt;= &apos;1&apos;;
                RegWrite  &lt;= &apos;1&apos;;
                BrIncond  &lt;= &apos;1&apos;;
                regToPC   &lt;= &apos;1&apos;;
                AluOp     &lt;= &quot;00&quot;;
                regSrc    &lt;= &quot;10&quot;;

            when others =&gt;
                -- Mantém valores padrão (instrução inválida ou não implementada)
                null;
        end case;
    end process;
end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>AluSrc,blockA,RegWrite,MemRead,MemWrite,Branch,BranchNotEq,BrIncond,regToPC,AluOp:2,regSrc:2</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>8</int>
        </entry>
      </elementAttributes>
      <pos x="1080" y="520"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>addValueToGraph</string>
          <boolean>false</boolean>
        </entry>
        <entry>
          <string>Bits</string>
          <int>5</int>
        </entry>
      </elementAttributes>
      <pos x="960" y="120"/>
    </visualElement>
    <visualElement>
      <elementName>Probe</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>Ponta de Prova</string>
        </entry>
      </elementAttributes>
      <pos x="1340" y="100"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>Selector Bits</string>
          <int>2</int>
        </entry>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="1380" y="-140"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>IDEX</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>clk,pcIn:32,read1In:32,read2In:32,immGenIn:32,aluControlIn:4,wbadIn:5,WBIn:3,MIn:6,EXin:4,pcP4In:32,rs1In:5,rs2In:5</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>12</int>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity IDEX is
    port (
        clk          : in  std_logic;
        pcIn         : in  std_logic_vector(31 downto 0);
        read1In      : in  std_logic_vector(31 downto 0);
        read2In      : in  std_logic_vector(31 downto 0);
        immGenIn     : in  std_logic_vector(31 downto 0);
        aluControlIn : in  std_logic_vector(3 downto 0);
        wbadIn       : in  std_logic_vector(4 downto 0);
        WBIn         : in  std_logic_vector(2 downto 0);
        MIn          : in  std_logic_vector(5 downto 0);
        EXin         : in  std_logic_vector(3 downto 0);
        pcP4In       : in  std_logic_vector(31 downto 0);
        rs1In        : in  std_logic_vector(4 downto 0);
        rs2In        : in  std_logic_vector(4 downto 0);
        
        pcOut        : out std_logic_vector(31 downto 0);
        read1Out     : out std_logic_vector(31 downto 0);
        read2Out     : out std_logic_vector(31 downto 0);
        immGenOut    : out std_logic_vector(31 downto 0);
        aluControlOut: out std_logic_vector(3 downto 0);
        wbadOut      : out std_logic_vector(4 downto 0);
        WBOut        : out std_logic_vector(2 downto 0);
        MOut         : out std_logic_vector(5 downto 0);
        EXOut        : out std_logic_vector(3 downto 0);
        pcP4Out      : out std_logic_vector(31 downto 0);
        rs1Out       : out std_logic_vector(4 downto 0);
        rs2Out       : out std_logic_vector(4 downto 0)
    );
end entity IDEX;

architecture Behavioral of IDEX is
    signal idex_s : std_logic_vector(191 downto 0);
begin
    process(clk)
    begin
        if rising_edge(clk) then
            idex_s(31 downto 0)    &lt;= pcIn;
            idex_s(63 downto 32)   &lt;= read1In;
            idex_s(95 downto 64)   &lt;= read2In;
            idex_s(127 downto 96)  &lt;= immGenIn;
            idex_s(131 downto 128) &lt;= aluControlIn;
            idex_s(136 downto 132) &lt;= wbadIn;
            idex_s(139 downto 137) &lt;= WBIn;
            idex_s(145 downto 140) &lt;= MIn;
            idex_s(149 downto 146) &lt;= EXin;
            idex_s(181 downto 150) &lt;= pcP4In;
            idex_s(186 downto 182) &lt;= rs1In;
            idex_s(191 downto 187) &lt;= rs2In;
        elsif falling_edge(clk) then
            pcOut         &lt;= idex_s(31 downto 0);
            read1Out      &lt;= idex_s(63 downto 32);
            read2Out      &lt;= idex_s(95 downto 64);
            immGenOut     &lt;= idex_s(127 downto 96);
            aluControlOut &lt;= idex_s(131 downto 128);
            wbadOut       &lt;= idex_s(136 downto 132);
            WBOut         &lt;= idex_s(139 downto 137);
            MOut          &lt;= idex_s(145 downto 140);
            EXOut         &lt;= idex_s(149 downto 146);
            pcP4Out       &lt;= idex_s(181 downto 150);
            rs1Out        &lt;= idex_s(186 downto 182);
            rs2Out        &lt;= idex_s(191 downto 187);
        end if;
    end process;
end architecture Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>pcOut:32,read1Out:32,read2Out:32,immGenOut:32,aluControlOut:4,wbadOut:5,WBOut:3,MOut:6,EXOut:4,pcP4Out:32,rs1Out:5,rs2Out:5</string>
        </entry>
      </elementAttributes>
      <pos x="1620" y="240"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>1*6</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>6</string>
        </entry>
      </elementAttributes>
      <pos x="1260" y="580"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>1,1,2</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>4</string>
        </entry>
      </elementAttributes>
      <pos x="1400" y="520"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>2,1</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>3</string>
        </entry>
      </elementAttributes>
      <pos x="1340" y="740"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>6</int>
        </entry>
      </elementAttributes>
      <pos x="1600" y="580"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>4</int>
        </entry>
      </elementAttributes>
      <pos x="1600" y="660"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>3</int>
        </entry>
      </elementAttributes>
      <pos x="1600" y="740"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Value</string>
          <long>0</long>
        </entry>
        <entry>
          <string>Bits</string>
          <int>6</int>
        </entry>
      </elementAttributes>
      <pos x="1560" y="620"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Value</string>
          <long>0</long>
        </entry>
        <entry>
          <string>Bits</string>
          <int>4</int>
        </entry>
      </elementAttributes>
      <pos x="1560" y="700"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Value</string>
          <long>0</long>
        </entry>
        <entry>
          <string>Bits</string>
          <int>3</int>
        </entry>
      </elementAttributes>
      <pos x="1560" y="780"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="2060" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>Selector Bits</string>
          <int>2</int>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="2300" y="400"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>4</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>1,1,2</string>
        </entry>
      </elementAttributes>
      <pos x="2040" y="400"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>Somador</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>A:32,B:32</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity Somador is
    Port (
        A : in  STD_LOGIC_VECTOR(31 downto 0);  -- Entrada A
        B : in  STD_LOGIC_VECTOR(31 downto 0);  -- Entrada B
        Z : out STD_LOGIC_VECTOR(31 downto 0)   -- Saída Z (A + B)
    );
end Somador;

architecture Behavioral of Somador is
begin
    -- Atribuição direta: Z é a soma de A e B
    Z &lt;= std_logic_vector(unsigned(A) + unsigned(B));
end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>Z:32</string>
        </entry>
      </elementAttributes>
      <pos x="2440" y="180"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>ALU</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>A:32,B:32,control:4</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.ALL;
USE IEEE.std_logic_unsigned.ALL;

-- A ALU FAZ A OPERAÇÃO INDICADA NO SINAL DE CONTROLE. ELA FAZ A + B, A - B, A OR B, A AND B, SHIFT LEFT E SHIFT RIGHT. A OPERAÇÃO DE SHIFT É MULTIPLICAR POR 2 (QND SHIFT RIGHT) E DIVIDIR POR 2 QUANDO É SHIFT LEFT.ESCIFICAR OS CÓDIGOS DA OPERAÇÃO.

entity ALU is
    port(
    A, B       : in std_logic_vector(31 downto 0);  -- Entradas A e B de 32 bits
    control   : in std_logic_vector(3 downto 0);   -- Entrada de controle de 4 bits que seleciona a operação
    result    : out std_logic_vector(31 downto 0); -- Saída de resultado de 32 bits
    zero      : out std_logic);                    -- Saída para sinalizar se o resultado é zero
end ALU;

architecture TypeArchitecture of ALU is

signal zero_out   : std_logic_vector(32 downto 0); -- Vetor para verificação de resultado zero
signal result_out : std_logic_vector(31 downto 0); -- Vetor para armazenar o resultado da operação

begin
	
    result_out &lt;= (A + B) when control = &quot;0010&quot; else                  -- Soma
    			   (A - B) when control = &quot;0110&quot; else                  -- Subtração
    			   (A XOR B) when control = &quot;0101&quot; else                -- XOR (ou exclusivo)
    			   (A OR B) when control = &quot;0001&quot; else                 -- OR (ou)
    			   (A AND B) when control = &quot;0000&quot; else                -- AND (e)
    			   (std_logic_vector(shift_left(unsigned(A), to_integer(unsigned(B))))) when control = &quot;0011&quot; else   -- Shift Left (deslocamento à esquerda)
    			   (std_logic_vector(shift_right(unsigned(A), to_integer(unsigned(B))))) when control = &quot;0111&quot;;    -- Shift Right (deslocamento à direita)
        			
    result &lt;= result_out;                          -- Atribui o valor do resultado à saída result
    zero_out(0) &lt;= &apos;0&apos;;                            -- Inicializa o primeiro bit de zero_out como &apos;0&apos;
    G2: for I in 1 to 32 generate
            zero_out(I) &lt;= zero_out(I - 1) or result_out(I - 1);  -- Verificação de resultado zero bit a bit
    end generate;
    zero &lt;= not zero_out(32);                      -- Sinaliza se o resultado é zero (se zero_out(32) for &apos;0&apos;, zero é &apos;1&apos;, caso contrário, zero é &apos;0&apos;)
end TypeArchitecture;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>result:32,zero</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>6</int>
        </entry>
      </elementAttributes>
      <pos x="2560" y="380"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>ALU_Control</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>Functs:4,AluOp:2</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity ALU_Control is
    port(
        Functs    : IN std_logic_vector(3 downto 0);    -- Entrada de códigos de função da ALU (4 bits)
        AluOp   : IN std_logic_vector(1 downto 0);      -- Entrada de códigos de operação da ALU (2 bits)
        Control : OUT std_logic_vector(3 downto 0)      -- Saída do controle da ALU (4 bits)
        );
end ALU_Control;

architecture TypeArchitecture of ALU_Control is
begin

	control &lt;= &quot;0010&quot; when AluOp = &quot;00&quot; else -- Se AluOp for &quot;00&quot;, Control recebe &quot;0010&quot; (Operação: Soma)
			 &quot;0110&quot; when AluOp = &quot;01&quot; else -- Se AluOp for &quot;01&quot;, Control recebe &quot;0110&quot; (Operação: Branch)
			 &quot;0010&quot; when Functs = &quot;0000&quot; else -- Se Functs for &quot;0000&quot;, Control recebe &quot;0010&quot; (Operação: Adição)
			 &quot;0110&quot; when Functs = &quot;1000&quot; else -- Se Functs for &quot;1000&quot;, Control recebe &quot;0110&quot; (Operação: Subtração)
			 &quot;0011&quot; when Functs = &quot;0001&quot; else -- Se Functs for &quot;0001&quot;, Control recebe &quot;0011&quot; (Operação: Shift Left)
			 &quot;0101&quot; when Functs = &quot;0100&quot; else -- Se Functs for &quot;0100&quot;, Control recebe &quot;0101&quot; (Operação: XOR)
			 &quot;0111&quot; when Functs = &quot;0101&quot; else -- Se Functs for &quot;0101&quot;, Control recebe &quot;0111&quot; (Operação: Shift Right)
			 &quot;0001&quot; when Functs = &quot;0110&quot; else -- Se Functs for &quot;0110&quot;, Control recebe &quot;0001&quot; (Operação: OR)
			 &quot;0000&quot; when Functs = &quot;0111&quot;; -- Se Functs for &quot;0111&quot;, Control recebe &quot;0000&quot; (Operação: AND)
	 
end TypeArchitecture;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>Control:4</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>4</int>
        </entry>
      </elementAttributes>
      <pos x="2560" y="660"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Value</string>
          <long>0</long>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="2020" y="240"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="2180" y="340"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>Selector Bits</string>
          <int>2</int>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="2300" y="540"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes/>
      <pos x="280" y="340"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>EXMEM</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>clk,sumIn:32,zeroIn,aluIn:32,read2In:32,wbadIn:5,WBIn:3,MIn:6,pcP4In:32</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity EXMEM is
    port (
        clk        : in  std_logic;
        sumIn      : in  std_logic_vector(31 downto 0);
        zeroIn     : in  std_logic;
        aluIn      : in  std_logic_vector(31 downto 0);
        read2In    : in  std_logic_vector(31 downto 0);
        wbadIn     : in  std_logic_vector(4 downto 0);
        WBIn       : in  std_logic_vector(2 downto 0);
        MIn        : in  std_logic_vector(5 downto 0);
        pcP4In     : in  std_logic_vector(31 downto 0);

        pcOut      : out std_logic_vector(31 downto 0);
        pcP4Out    : out std_logic_vector(31 downto 0);
        zeroOut    : out std_logic;
        aluOut     : out std_logic_vector(31 downto 0);
        read2Out   : out std_logic_vector(31 downto 0);
        wbadOut    : out std_logic_vector(4 downto 0);
        WBOut      : out std_logic_vector(2 downto 0);
        MOut       : out std_logic_vector(5 downto 0)
    );
end entity EXMEM;

architecture Behavioral of EXMEM is
    signal exmem_s : std_logic_vector(142 downto 0);
begin
    process(clk)
    begin
        if rising_edge(clk) then
            exmem_s(31 downto 0)     &lt;= sumIn;
            exmem_s(32)              &lt;= zeroIn;
            exmem_s(64 downto 33)    &lt;= aluIn;
            exmem_s(96 downto 65)    &lt;= read2In;
            exmem_s(101 downto 97)   &lt;= wbadIn;
            exmem_s(104 downto 102)  &lt;= WBIn;
            exmem_s(110 downto 105)  &lt;= MIn;
            exmem_s(142 downto 111)  &lt;= pcP4In;
        end if;
    end process;

    -- Atribuições das saídas
    pcOut     &lt;= exmem_s(31 downto 0);
    zeroOut   &lt;= exmem_s(32);
    aluOut    &lt;= exmem_s(64 downto 33);
    read2Out  &lt;= exmem_s(96 downto 65);
    wbadOut   &lt;= exmem_s(101 downto 97);
    WBOut     &lt;= exmem_s(104 downto 102);
    MOut      &lt;= exmem_s(110 downto 105);
    pcP4Out   &lt;= exmem_s(142 downto 111);

end architecture Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>pcOut:32,pcP4Out:32,zeroOut,aluOut:32,read2Out:32,wbadOut:5,WBOut:3,MOut:6</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>10</int>
        </entry>
      </elementAttributes>
      <pos x="2880" y="160"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>Forward</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>clk,regWriteMEM,regWriteWB,RSrc1:5,RSrc2:5,RDMEM:5,RDWB:5</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.std_logic_1164.all;

entity Forward is
    port (
        clk         : in  std_logic;
        regWriteMEM : in  std_logic;
        regWriteWB  : in  std_logic;
        RSrc1       : in  std_logic_vector(4 downto 0);
        RSrc2       : in  std_logic_vector(4 downto 0);
        RDMEM       : in  std_logic_vector(4 downto 0);
        RDWB        : in  std_logic_vector(4 downto 0);
        forwardA    : out std_logic_vector(1 downto 0);
        forwardB    : out std_logic_vector(1 downto 0)
    );
end entity Forward;

architecture TypeArchitecture of Forward is
    signal forwardA_interno, forwardB_interno : std_logic_vector(1 downto 0) := &quot;00&quot;;
begin
    process(clk)
    begin
        if rising_edge(clk) then
            -- Encaminhamento da fase MEM para a fonte A
            if (regWriteMEM = &apos;1&apos;) and (RDMEM /= &quot;00000&quot;) and (RDMEM = RSrc1) then
                forwardA_interno &lt;= &quot;10&quot;;
            end if;

            -- Encaminhamento da fase MEM para a fonte B
            if (regWriteMEM = &apos;1&apos;) and (RDMEM /= &quot;00000&quot;) and (RDMEM = RSrc2) then
                forwardB_interno &lt;= &quot;10&quot;;
            end if;

            -- Encaminhamento da fase WB para a fonte A
            if (regWriteWB = &apos;1&apos;) and (RDWB /= &quot;00000&quot;) and (RDWB = RSrc1) then
                forwardA_interno &lt;= &quot;01&quot;;
            end if;

            -- Encaminhamento da fase WB para a fonte B
            if (regWriteWB = &apos;1&apos;) and (RDWB /= &quot;00000&quot;) and (RDWB = RSrc2) then
                forwardB_interno &lt;= &quot;01&quot;;
            end if;
        end if;
    end process;

    -- Atribuições finais às saídas
    forwardA &lt;= forwardA_interno;
    forwardB &lt;= forwardB_interno;

end architecture TypeArchitecture;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>forwardA:2,forwardB:2</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>10</int>
        </entry>
      </elementAttributes>
      <pos x="2880" y="580"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>mirror</string>
          <boolean>true</boolean>
        </entry>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>Input Splitting</string>
          <string>6</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>0-0</string>
        </entry>
      </elementAttributes>
      <pos x="2120" y="820"/>
    </visualElement>
    <visualElement>
      <elementName>And</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>wideShape</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="3360" y="20"/>
    </visualElement>
    <visualElement>
      <elementName>Not</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
      </elementAttributes>
      <pos x="3420" y="140"/>
    </visualElement>
    <visualElement>
      <elementName>Or</elementName>
      <elementAttributes>
        <entry>
          <string>wideShape</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="3260" y="20"/>
    </visualElement>
    <visualElement>
      <elementName>Or</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>wideShape</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="3340" y="-100"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>flipSelPos</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="3380" y="100"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>6</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>1*6</string>
        </entry>
      </elementAttributes>
      <pos x="3100" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>mirror</string>
          <boolean>true</boolean>
        </entry>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>Input Splitting</string>
          <string>1,1</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>2</string>
        </entry>
      </elementAttributes>
      <pos x="1460" y="-220"/>
    </visualElement>
    <visualElement>
      <elementName>RAMDualPort</elementName>
      <elementAttributes>
        <entry>
          <string>AddrBits</string>
          <int>24</int>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="3360" y="280"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>32</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>0-23</string>
        </entry>
      </elementAttributes>
      <pos x="3300" y="280"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>MEMWB</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>clk,readIn:32,aluIn:32,wbadIn:5,WBIn:3,pcP4In:32,pcP1In:32</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MEMWB is
    port (
        clk       : in  std_logic;
        readIn    : in  std_logic_vector(31 downto 0);
        aluIn     : in  std_logic_vector(31 downto 0);
        wbadIn    : in  std_logic_vector(4 downto 0);
        WBIn      : in  std_logic_vector(2 downto 0);
        pcP4In    : in  std_logic_vector(31 downto 0);
        pcP1In    : in  std_logic_vector(31 downto 0);

        readOut   : out std_logic_vector(31 downto 0);
        aluOut    : out std_logic_vector(31 downto 0);
        wbadOut   : out std_logic_vector(4 downto 0);
        WBOut     : out std_logic_vector(2 downto 0);
        pcP4Out   : out std_logic_vector(31 downto 0);
        pcP1Out   : out std_logic_vector(31 downto 0)
    );
end entity MEMWB;

architecture Behavioral of MEMWB is
    signal memwb_s : std_logic_vector(135 downto 0);
begin
    process(clk)
    begin
        if rising_edge(clk) then
            memwb_s(31 downto 0)    &lt;= readIn;
            memwb_s(63 downto 32)   &lt;= aluIn;
            memwb_s(68 downto 64)   &lt;= wbadIn;
            memwb_s(71 downto 69)   &lt;= WBIn;
            memwb_s(103 downto 72)  &lt;= pcP4In;
            memwb_s(135 downto 104) &lt;= pcP1In;
        elsif falling_edge(clk) then
            readOut  &lt;= memwb_s(31 downto 0);
            aluOut   &lt;= memwb_s(63 downto 32);
            wbadOut  &lt;= memwb_s(68 downto 64);
            WBOut    &lt;= memwb_s(71 downto 69);
            pcP4Out  &lt;= memwb_s(103 downto 72);
            pcP1Out  &lt;= memwb_s(135 downto 104);
        end if;
    end process;
end architecture Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>readOut:32,aluOut:32,wbadOut:5,WBOut:3,pcP4Out:32,pcP1Out:32</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>10</int>
        </entry>
      </elementAttributes>
      <pos x="3720" y="280"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>Selector Bits</string>
          <int>2</int>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="4120" y="220"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>3</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>1*3</string>
        </entry>
      </elementAttributes>
      <pos x="4040" y="340"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>Input Splitting</string>
          <string>1,1</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>2</string>
        </entry>
      </elementAttributes>
      <pos x="4120" y="340"/>
    </visualElement>
    <visualElement>
      <elementName>Splitter</elementName>
      <elementAttributes>
        <entry>
          <string>mirror</string>
          <boolean>true</boolean>
        </entry>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>Input Splitting</string>
          <string>3</string>
        </entry>
        <entry>
          <string>Output Splitting</string>
          <string>0-0</string>
        </entry>
      </elementAttributes>
      <pos x="3160" y="560"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Value</string>
          <long>0</long>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="2160" y="540"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="1400" y="-80"/>
      <p2 x="3080" y="-60"/>
    </wire>
    <wire>
      <p1 x="-60" y="640"/>
      <p2 x="460" y="640"/>
    </wire>
    <wire>
      <p1 x="1540" y="640"/>
      <p2 x="1620" y="640"/>
    </wire>
    <wire>
      <p1 x="2140" y="640"/>
      <p2 x="2680" y="640"/>
    </wire>
    <wire>
      <p1 x="2740" y="640"/>
      <p2 x="2880" y="640"/>
    </wire>
    <wire>
      <p1 x="1240" y="640"/>
      <p2 x="1260" y="640"/>
    </wire>
    <wire>
      <p1 x="460" y="640"/>
      <p2 x="900" y="640"/>
    </wire>
    <wire>
      <p1 x="3200" y="0"/>
      <p2 x="3340" y="0"/>
    </wire>
    <wire>
      <p1 x="-80" y="0"/>
      <p2 x="-60" y="0"/>
    </wire>
    <wire>
      <p1 x="0" y="0"/>
      <p2 x="40" y="0"/>
    </wire>
    <wire>
      <p1 x="3100" y="-260"/>
      <p2 x="3640" y="-260"/>
    </wire>
    <wire>
      <p1 x="60" y="260"/>
      <p2 x="80" y="260"/>
    </wire>
    <wire>
      <p1 x="460" y="260"/>
      <p2 x="480" y="260"/>
    </wire>
    <wire>
      <p1 x="200" y="260"/>
      <p2 x="420" y="260"/>
    </wire>
    <wire>
      <p1 x="1280" y="260"/>
      <p2 x="1540" y="260"/>
    </wire>
    <wire>
      <p1 x="680" y="260"/>
      <p2 x="1000" y="260"/>
    </wire>
    <wire>
      <p1 x="1580" y="260"/>
      <p2 x="1620" y="260"/>
    </wire>
    <wire>
      <p1 x="1860" y="260"/>
      <p2 x="1880" y="260"/>
    </wire>
    <wire>
      <p1 x="1060" y="260"/>
      <p2 x="1080" y="260"/>
    </wire>
    <wire>
      <p1 x="2120" y="260"/>
      <p2 x="2880" y="260"/>
    </wire>
    <wire>
      <p1 x="3080" y="260"/>
      <p2 x="3540" y="260"/>
    </wire>
    <wire>
      <p1 x="3960" y="260"/>
      <p2 x="4120" y="260"/>
    </wire>
    <wire>
      <p1 x="80" y="260"/>
      <p2 x="100" y="260"/>
    </wire>
    <wire>
      <p1 x="3540" y="260"/>
      <p2 x="3660" y="260"/>
    </wire>
    <wire>
      <p1 x="1000" y="900"/>
      <p2 x="2780" y="900"/>
    </wire>
    <wire>
      <p1 x="2780" y="900"/>
      <p2 x="4000" y="900"/>
    </wire>
    <wire>
      <p1 x="720" y="520"/>
      <p2 x="1020" y="520"/>
    </wire>
    <wire>
      <p1 x="1520" y="520"/>
      <p2 x="1700" y="520"/>
    </wire>
    <wire>
      <p1 x="2320" y="520"/>
      <p2 x="3100" y="520"/>
    </wire>
    <wire>
      <p1 x="1240" y="520"/>
      <p2 x="1400" y="520"/>
    </wire>
    <wire>
      <p1 x="1560" y="780"/>
      <p2 x="1600" y="780"/>
    </wire>
    <wire>
      <p1 x="700" y="780"/>
      <p2 x="740" y="780"/>
    </wire>
    <wire>
      <p1 x="2060" y="780"/>
      <p2 x="2760" y="780"/>
    </wire>
    <wire>
      <p1 x="1600" y="140"/>
      <p2 x="2860" y="140"/>
    </wire>
    <wire>
      <p1 x="2860" y="140"/>
      <p2 x="3360" y="140"/>
    </wire>
    <wire>
      <p1 x="800" y="400"/>
      <p2 x="860" y="400"/>
    </wire>
    <wire>
      <p1 x="500" y="400"/>
      <p2 x="700" y="400"/>
    </wire>
    <wire>
      <p1 x="900" y="400"/>
      <p2 x="1320" y="400"/>
    </wire>
    <wire>
      <p1 x="1540" y="400"/>
      <p2 x="1620" y="400"/>
    </wire>
    <wire>
      <p1 x="1860" y="400"/>
      <p2 x="2040" y="400"/>
    </wire>
    <wire>
      <p1 x="2060" y="400"/>
      <p2 x="2200" y="400"/>
    </wire>
    <wire>
      <p1 x="2440" y="400"/>
      <p2 x="2560" y="400"/>
    </wire>
    <wire>
      <p1 x="2640" y="400"/>
      <p2 x="2680" y="400"/>
    </wire>
    <wire>
      <p1 x="3120" y="400"/>
      <p2 x="3180" y="400"/>
    </wire>
    <wire>
      <p1 x="3620" y="400"/>
      <p2 x="3720" y="400"/>
    </wire>
    <wire>
      <p1 x="980" y="1040"/>
      <p2 x="4060" y="1040"/>
    </wire>
    <wire>
      <p1 x="-100" y="-20"/>
      <p2 x="-60" y="-20"/>
    </wire>
    <wire>
      <p1 x="1520" y="660"/>
      <p2 x="1600" y="660"/>
    </wire>
    <wire>
      <p1 x="2100" y="660"/>
      <p2 x="2580" y="660"/>
    </wire>
    <wire>
      <p1 x="2760" y="660"/>
      <p2 x="2880" y="660"/>
    </wire>
    <wire>
      <p1 x="1240" y="660"/>
      <p2 x="1260" y="660"/>
    </wire>
    <wire>
      <p1 x="3220" y="20"/>
      <p2 x="3260" y="20"/>
    </wire>
    <wire>
      <p1 x="-40" y="280"/>
      <p2 x="100" y="280"/>
    </wire>
    <wire>
      <p1 x="460" y="280"/>
      <p2 x="480" y="280"/>
    </wire>
    <wire>
      <p1 x="840" y="280"/>
      <p2 x="1060" y="280"/>
    </wire>
    <wire>
      <p1 x="1280" y="280"/>
      <p2 x="1340" y="280"/>
    </wire>
    <wire>
      <p1 x="1560" y="280"/>
      <p2 x="1620" y="280"/>
    </wire>
    <wire>
      <p1 x="680" y="280"/>
      <p2 x="720" y="280"/>
    </wire>
    <wire>
      <p1 x="1860" y="280"/>
      <p2 x="2180" y="280"/>
    </wire>
    <wire>
      <p1 x="2680" y="280"/>
      <p2 x="2880" y="280"/>
    </wire>
    <wire>
      <p1 x="3320" y="280"/>
      <p2 x="3360" y="280"/>
    </wire>
    <wire>
      <p1 x="3980" y="280"/>
      <p2 x="4120" y="280"/>
    </wire>
    <wire>
      <p1 x="3080" y="280"/>
      <p2 x="3160" y="280"/>
    </wire>
    <wire>
      <p1 x="2180" y="280"/>
      <p2 x="2660" y="280"/>
    </wire>
    <wire>
      <p1 x="1060" y="280"/>
      <p2 x="1080" y="280"/>
    </wire>
    <wire>
      <p1 x="640" y="920"/>
      <p2 x="2020" y="920"/>
    </wire>
    <wire>
      <p1 x="920" y="540"/>
      <p2 x="1080" y="540"/>
    </wire>
    <wire>
      <p1 x="1560" y="540"/>
      <p2 x="1680" y="540"/>
    </wire>
    <wire>
      <p1 x="2240" y="540"/>
      <p2 x="2300" y="540"/>
    </wire>
    <wire>
      <p1 x="2820" y="540"/>
      <p2 x="4100" y="540"/>
    </wire>
    <wire>
      <p1 x="1240" y="540"/>
      <p2 x="1400" y="540"/>
    </wire>
    <wire>
      <p1 x="1420" y="540"/>
      <p2 x="1520" y="540"/>
    </wire>
    <wire>
      <p1 x="2160" y="540"/>
      <p2 x="2180" y="540"/>
    </wire>
    <wire>
      <p1 x="1460" y="-160"/>
      <p2 x="1480" y="-160"/>
    </wire>
    <wire>
      <p1 x="-220" y="-160"/>
      <p2 x="-160" y="-160"/>
    </wire>
    <wire>
      <p1 x="1060" y="160"/>
      <p2 x="2280" y="160"/>
    </wire>
    <wire>
      <p1 x="2860" y="160"/>
      <p2 x="2880" y="160"/>
    </wire>
    <wire>
      <p1 x="3380" y="160"/>
      <p2 x="3420" y="160"/>
    </wire>
    <wire>
      <p1 x="640" y="800"/>
      <p2 x="740" y="800"/>
    </wire>
    <wire>
      <p1 x="900" y="800"/>
      <p2 x="1540" y="800"/>
    </wire>
    <wire>
      <p1 x="1540" y="800"/>
      <p2 x="1620" y="800"/>
    </wire>
    <wire>
      <p1 x="-20" y="420"/>
      <p2 x="20" y="420"/>
    </wire>
    <wire>
      <p1 x="80" y="420"/>
      <p2 x="120" y="420"/>
    </wire>
    <wire>
      <p1 x="140" y="420"/>
      <p2 x="200" y="420"/>
    </wire>
    <wire>
      <p1 x="940" y="420"/>
      <p2 x="1340" y="420"/>
    </wire>
    <wire>
      <p1 x="1560" y="420"/>
      <p2 x="1620" y="420"/>
    </wire>
    <wire>
      <p1 x="2280" y="420"/>
      <p2 x="2300" y="420"/>
    </wire>
    <wire>
      <p1 x="2540" y="420"/>
      <p2 x="2560" y="420"/>
    </wire>
    <wire>
      <p1 x="3160" y="420"/>
      <p2 x="3600" y="420"/>
    </wire>
    <wire>
      <p1 x="2060" y="420"/>
      <p2 x="2080" y="420"/>
    </wire>
    <wire>
      <p1 x="1860" y="420"/>
      <p2 x="2000" y="420"/>
    </wire>
    <wire>
      <p1 x="3340" y="40"/>
      <p2 x="3360" y="40"/>
    </wire>
    <wire>
      <p1 x="1640" y="680"/>
      <p2 x="1680" y="680"/>
    </wire>
    <wire>
      <p1 x="2640" y="680"/>
      <p2 x="2660" y="680"/>
    </wire>
    <wire>
      <p1 x="660" y="680"/>
      <p2 x="820" y="680"/>
    </wire>
    <wire>
      <p1 x="2840" y="680"/>
      <p2 x="2880" y="680"/>
    </wire>
    <wire>
      <p1 x="1240" y="680"/>
      <p2 x="1260" y="680"/>
    </wire>
    <wire>
      <p1 x="180" y="300"/>
      <p2 x="200" y="300"/>
    </wire>
    <wire>
      <p1 x="280" y="300"/>
      <p2 x="320" y="300"/>
    </wire>
    <wire>
      <p1 x="420" y="300"/>
      <p2 x="480" y="300"/>
    </wire>
    <wire>
      <p1 x="680" y="300"/>
      <p2 x="700" y="300"/>
    </wire>
    <wire>
      <p1 x="960" y="300"/>
      <p2 x="1040" y="300"/>
    </wire>
    <wire>
      <p1 x="800" y="300"/>
      <p2 x="920" y="300"/>
    </wire>
    <wire>
      <p1 x="1540" y="300"/>
      <p2 x="1620" y="300"/>
    </wire>
    <wire>
      <p1 x="1860" y="300"/>
      <p2 x="2160" y="300"/>
    </wire>
    <wire>
      <p1 x="2700" y="300"/>
      <p2 x="2880" y="300"/>
    </wire>
    <wire>
      <p1 x="3080" y="300"/>
      <p2 x="3100" y="300"/>
    </wire>
    <wire>
      <p1 x="3280" y="300"/>
      <p2 x="3360" y="300"/>
    </wire>
    <wire>
      <p1 x="3120" y="300"/>
      <p2 x="3260" y="300"/>
    </wire>
    <wire>
      <p1 x="3440" y="300"/>
      <p2 x="3720" y="300"/>
    </wire>
    <wire>
      <p1 x="3920" y="300"/>
      <p2 x="3940" y="300"/>
    </wire>
    <wire>
      <p1 x="2160" y="300"/>
      <p2 x="2420" y="300"/>
    </wire>
    <wire>
      <p1 x="1040" y="300"/>
      <p2 x="1080" y="300"/>
    </wire>
    <wire>
      <p1 x="200" y="300"/>
      <p2 x="260" y="300"/>
    </wire>
    <wire>
      <p1 x="700" y="300"/>
      <p2 x="780" y="300"/>
    </wire>
    <wire>
      <p1 x="1540" y="560"/>
      <p2 x="1660" y="560"/>
    </wire>
    <wire>
      <p1 x="2280" y="560"/>
      <p2 x="2300" y="560"/>
    </wire>
    <wire>
      <p1 x="2840" y="560"/>
      <p2 x="3140" y="560"/>
    </wire>
    <wire>
      <p1 x="1240" y="560"/>
      <p2 x="1300" y="560"/>
    </wire>
    <wire>
      <p1 x="1440" y="-180"/>
      <p2 x="1480" y="-180"/>
    </wire>
    <wire>
      <p1 x="720" y="180"/>
      <p2 x="1360" y="180"/>
    </wire>
    <wire>
      <p1 x="1860" y="180"/>
      <p2 x="2440" y="180"/>
    </wire>
    <wire>
      <p1 x="2520" y="180"/>
      <p2 x="2880" y="180"/>
    </wire>
    <wire>
      <p1 x="3360" y="180"/>
      <p2 x="3720" y="180"/>
    </wire>
    <wire>
      <p1 x="3080" y="180"/>
      <p2 x="3100" y="180"/>
    </wire>
    <wire>
      <p1 x="920" y="820"/>
      <p2 x="2100" y="820"/>
    </wire>
    <wire>
      <p1 x="680" y="820"/>
      <p2 x="740" y="820"/>
    </wire>
    <wire>
      <p1 x="-120" y="440"/>
      <p2 x="-80" y="440"/>
    </wire>
    <wire>
      <p1 x="1060" y="440"/>
      <p2 x="1320" y="440"/>
    </wire>
    <wire>
      <p1 x="1360" y="440"/>
      <p2 x="1620" y="440"/>
    </wire>
    <wire>
      <p1 x="2340" y="440"/>
      <p2 x="2420" y="440"/>
    </wire>
    <wire>
      <p1 x="2060" y="440"/>
      <p2 x="2080" y="440"/>
    </wire>
    <wire>
      <p1 x="1860" y="440"/>
      <p2 x="2040" y="440"/>
    </wire>
    <wire>
      <p1 x="2260" y="440"/>
      <p2 x="2300" y="440"/>
    </wire>
    <wire>
      <p1 x="-80" y="440"/>
      <p2 x="20" y="440"/>
    </wire>
    <wire>
      <p1 x="2280" y="1080"/>
      <p2 x="4160" y="1080"/>
    </wire>
    <wire>
      <p1 x="3080" y="-60"/>
      <p2 x="3380" y="-60"/>
    </wire>
    <wire>
      <p1 x="3380" y="-60"/>
      <p2 x="3620" y="-60"/>
    </wire>
    <wire>
      <p1 x="3240" y="60"/>
      <p2 x="3260" y="60"/>
    </wire>
    <wire>
      <p1 x="2080" y="700"/>
      <p2 x="2580" y="700"/>
    </wire>
    <wire>
      <p1 x="1560" y="700"/>
      <p2 x="1600" y="700"/>
    </wire>
    <wire>
      <p1 x="680" y="700"/>
      <p2 x="840" y="700"/>
    </wire>
    <wire>
      <p1 x="2780" y="700"/>
      <p2 x="2880" y="700"/>
    </wire>
    <wire>
      <p1 x="1240" y="700"/>
      <p2 x="1400" y="700"/>
    </wire>
    <wire>
      <p1 x="440" y="320"/>
      <p2 x="480" y="320"/>
    </wire>
    <wire>
      <p1 x="380" y="320"/>
      <p2 x="400" y="320"/>
    </wire>
    <wire>
      <p1 x="-60" y="320"/>
      <p2 x="100" y="320"/>
    </wire>
    <wire>
      <p1 x="1300" y="320"/>
      <p2 x="1620" y="320"/>
    </wire>
    <wire>
      <p1 x="800" y="320"/>
      <p2 x="940" y="320"/>
    </wire>
    <wire>
      <p1 x="1860" y="320"/>
      <p2 x="2100" y="320"/>
    </wire>
    <wire>
      <p1 x="2720" y="320"/>
      <p2 x="2880" y="320"/>
    </wire>
    <wire>
      <p1 x="1000" y="320"/>
      <p2 x="1080" y="320"/>
    </wire>
    <wire>
      <p1 x="3120" y="320"/>
      <p2 x="3360" y="320"/>
    </wire>
    <wire>
      <p1 x="3420" y="320"/>
      <p2 x="3440" y="320"/>
    </wire>
    <wire>
      <p1 x="3700" y="320"/>
      <p2 x="3720" y="320"/>
    </wire>
    <wire>
      <p1 x="3920" y="320"/>
      <p2 x="4000" y="320"/>
    </wire>
    <wire>
      <p1 x="1580" y="580"/>
      <p2 x="1600" y="580"/>
    </wire>
    <wire>
      <p1 x="2340" y="580"/>
      <p2 x="2440" y="580"/>
    </wire>
    <wire>
      <p1 x="2540" y="580"/>
      <p2 x="2660" y="580"/>
    </wire>
    <wire>
      <p1 x="2860" y="580"/>
      <p2 x="2880" y="580"/>
    </wire>
    <wire>
      <p1 x="3080" y="580"/>
      <p2 x="3100" y="580"/>
    </wire>
    <wire>
      <p1 x="2260" y="580"/>
      <p2 x="2300" y="580"/>
    </wire>
    <wire>
      <p1 x="1240" y="580"/>
      <p2 x="1260" y="580"/>
    </wire>
    <wire>
      <p1 x="1460" y="-200"/>
      <p2 x="3180" y="-200"/>
    </wire>
    <wire>
      <p1 x="-120" y="-200"/>
      <p2 x="1420" y="-200"/>
    </wire>
    <wire>
      <p1 x="1000" y="200"/>
      <p2 x="1580" y="200"/>
    </wire>
    <wire>
      <p1 x="1880" y="200"/>
      <p2 x="2060" y="200"/>
    </wire>
    <wire>
      <p1 x="2500" y="200"/>
      <p2 x="2520" y="200"/>
    </wire>
    <wire>
      <p1 x="2640" y="200"/>
      <p2 x="2880" y="200"/>
    </wire>
    <wire>
      <p1 x="3080" y="200"/>
      <p2 x="3380" y="200"/>
    </wire>
    <wire>
      <p1 x="660" y="840"/>
      <p2 x="740" y="840"/>
    </wire>
    <wire>
      <p1 x="-40" y="460"/>
      <p2 x="20" y="460"/>
    </wire>
    <wire>
      <p1 x="700" y="460"/>
      <p2 x="1080" y="460"/>
    </wire>
    <wire>
      <p1 x="1200" y="460"/>
      <p2 x="1300" y="460"/>
    </wire>
    <wire>
      <p1 x="1320" y="460"/>
      <p2 x="1620" y="460"/>
    </wire>
    <wire>
      <p1 x="1860" y="460"/>
      <p2 x="2060" y="460"/>
    </wire>
    <wire>
      <p1 x="2180" y="460"/>
      <p2 x="2300" y="460"/>
    </wire>
    <wire>
      <p1 x="120" y="-80"/>
      <p2 x="240" y="-80"/>
    </wire>
    <wire>
      <p1 x="2120" y="720"/>
      <p2 x="2700" y="720"/>
    </wire>
    <wire>
      <p1 x="1540" y="720"/>
      <p2 x="1620" y="720"/>
    </wire>
    <wire>
      <p1 x="700" y="720"/>
      <p2 x="920" y="720"/>
    </wire>
    <wire>
      <p1 x="2840" y="720"/>
      <p2 x="3540" y="720"/>
    </wire>
    <wire>
      <p1 x="3240" y="80"/>
      <p2 x="3380" y="80"/>
    </wire>
    <wire>
      <p1 x="-140" y="340"/>
      <p2 x="100" y="340"/>
    </wire>
    <wire>
      <p1 x="400" y="340"/>
      <p2 x="480" y="340"/>
    </wire>
    <wire>
      <p1 x="800" y="340"/>
      <p2 x="860" y="340"/>
    </wire>
    <wire>
      <p1 x="880" y="340"/>
      <p2 x="900" y="340"/>
    </wire>
    <wire>
      <p1 x="1320" y="340"/>
      <p2 x="1620" y="340"/>
    </wire>
    <wire>
      <p1 x="280" y="340"/>
      <p2 x="320" y="340"/>
    </wire>
    <wire>
      <p1 x="1860" y="340"/>
      <p2 x="2020" y="340"/>
    </wire>
    <wire>
      <p1 x="980" y="340"/>
      <p2 x="1080" y="340"/>
    </wire>
    <wire>
      <p1 x="3120" y="340"/>
      <p2 x="3220" y="340"/>
    </wire>
    <wire>
      <p1 x="3340" y="340"/>
      <p2 x="3360" y="340"/>
    </wire>
    <wire>
      <p1 x="3660" y="340"/>
      <p2 x="3720" y="340"/>
    </wire>
    <wire>
      <p1 x="3920" y="340"/>
      <p2 x="4040" y="340"/>
    </wire>
    <wire>
      <p1 x="4060" y="340"/>
      <p2 x="4100" y="340"/>
    </wire>
    <wire>
      <p1 x="4100" y="340"/>
      <p2 x="4120" y="340"/>
    </wire>
    <wire>
      <p1 x="2020" y="340"/>
      <p2 x="2120" y="340"/>
    </wire>
    <wire>
      <p1 x="1640" y="600"/>
      <p2 x="1660" y="600"/>
    </wire>
    <wire>
      <p1 x="2840" y="600"/>
      <p2 x="2880" y="600"/>
    </wire>
    <wire>
      <p1 x="3080" y="600"/>
      <p2 x="3120" y="600"/>
    </wire>
    <wire>
      <p1 x="1240" y="600"/>
      <p2 x="1260" y="600"/>
    </wire>
    <wire>
      <p1 x="1280" y="600"/>
      <p2 x="1580" y="600"/>
    </wire>
    <wire>
      <p1 x="2180" y="600"/>
      <p2 x="2300" y="600"/>
    </wire>
    <wire>
      <p1 x="1460" y="-220"/>
      <p2 x="3360" y="-220"/>
    </wire>
    <wire>
      <p1 x="-160" y="-220"/>
      <p2 x="440" y="-220"/>
    </wire>
    <wire>
      <p1 x="460" y="220"/>
      <p2 x="1600" y="220"/>
    </wire>
    <wire>
      <p1 x="2420" y="220"/>
      <p2 x="2440" y="220"/>
    </wire>
    <wire>
      <p1 x="2100" y="220"/>
      <p2 x="2300" y="220"/>
    </wire>
    <wire>
      <p1 x="2680" y="220"/>
      <p2 x="2880" y="220"/>
    </wire>
    <wire>
      <p1 x="3940" y="220"/>
      <p2 x="4120" y="220"/>
    </wire>
    <wire>
      <p1 x="3080" y="220"/>
      <p2 x="3160" y="220"/>
    </wire>
    <wire>
      <p1 x="3300" y="220"/>
      <p2 x="3700" y="220"/>
    </wire>
    <wire>
      <p1 x="3160" y="220"/>
      <p2 x="3300" y="220"/>
    </wire>
    <wire>
      <p1 x="1040" y="480"/>
      <p2 x="1620" y="480"/>
    </wire>
    <wire>
      <p1 x="2000" y="480"/>
      <p2 x="2220" y="480"/>
    </wire>
    <wire>
      <p1 x="300" y="-100"/>
      <p2 x="440" y="-100"/>
    </wire>
    <wire>
      <p1 x="440" y="-100"/>
      <p2 x="1380" y="-100"/>
    </wire>
    <wire>
      <p1 x="1360" y="740"/>
      <p2 x="1600" y="740"/>
    </wire>
    <wire>
      <p1 x="1240" y="740"/>
      <p2 x="1340" y="740"/>
    </wire>
    <wire>
      <p1 x="2220" y="740"/>
      <p2 x="2720" y="740"/>
    </wire>
    <wire>
      <p1 x="800" y="360"/>
      <p2 x="840" y="360"/>
    </wire>
    <wire>
      <p1 x="1340" y="360"/>
      <p2 x="1620" y="360"/>
    </wire>
    <wire>
      <p1 x="2220" y="360"/>
      <p2 x="2240" y="360"/>
    </wire>
    <wire>
      <p1 x="1860" y="360"/>
      <p2 x="2140" y="360"/>
    </wire>
    <wire>
      <p1 x="3120" y="360"/>
      <p2 x="3240" y="360"/>
    </wire>
    <wire>
      <p1 x="3260" y="360"/>
      <p2 x="3360" y="360"/>
    </wire>
    <wire>
      <p1 x="3920" y="360"/>
      <p2 x="3960" y="360"/>
    </wire>
    <wire>
      <p1 x="4060" y="360"/>
      <p2 x="4120" y="360"/>
    </wire>
    <wire>
      <p1 x="3600" y="360"/>
      <p2 x="3720" y="360"/>
    </wire>
    <wire>
      <p1 x="980" y="360"/>
      <p2 x="1080" y="360"/>
    </wire>
    <wire>
      <p1 x="620" y="1000"/>
      <p2 x="2860" y="1000"/>
    </wire>
    <wire>
      <p1 x="2860" y="1000"/>
      <p2 x="3340" y="1000"/>
    </wire>
    <wire>
      <p1 x="1560" y="620"/>
      <p2 x="1600" y="620"/>
    </wire>
    <wire>
      <p1 x="2820" y="620"/>
      <p2 x="2880" y="620"/>
    </wire>
    <wire>
      <p1 x="2320" y="620"/>
      <p2 x="2520" y="620"/>
    </wire>
    <wire>
      <p1 x="1240" y="620"/>
      <p2 x="1260" y="620"/>
    </wire>
    <wire>
      <p1 x="-220" y="-240"/>
      <p2 x="40" y="-240"/>
    </wire>
    <wire>
      <p1 x="80" y="240"/>
      <p2 x="460" y="240"/>
    </wire>
    <wire>
      <p1 x="1020" y="240"/>
      <p2 x="1080" y="240"/>
    </wire>
    <wire>
      <p1 x="1280" y="240"/>
      <p2 x="1560" y="240"/>
    </wire>
    <wire>
      <p1 x="1600" y="240"/>
      <p2 x="1620" y="240"/>
    </wire>
    <wire>
      <p1 x="2020" y="240"/>
      <p2 x="2060" y="240"/>
    </wire>
    <wire>
      <p1 x="2660" y="240"/>
      <p2 x="2880" y="240"/>
    </wire>
    <wire>
      <p1 x="3080" y="240"/>
      <p2 x="3280" y="240"/>
    </wire>
    <wire>
      <p1 x="3920" y="240"/>
      <p2 x="4120" y="240"/>
    </wire>
    <wire>
      <p1 x="2520" y="500"/>
      <p2 x="3120" y="500"/>
    </wire>
    <wire>
      <p1 x="200" y="-120"/>
      <p2 x="240" y="-120"/>
    </wire>
    <wire>
      <p1 x="1420" y="-120"/>
      <p2 x="1440" y="-120"/>
    </wire>
    <wire>
      <p1 x="2260" y="-120"/>
      <p2 x="3160" y="-120"/>
    </wire>
    <wire>
      <p1 x="1440" y="-120"/>
      <p2 x="2260" y="-120"/>
    </wire>
    <wire>
      <p1 x="-80" y="760"/>
      <p2 x="620" y="760"/>
    </wire>
    <wire>
      <p1 x="1640" y="760"/>
      <p2 x="1700" y="760"/>
    </wire>
    <wire>
      <p1 x="2040" y="760"/>
      <p2 x="2740" y="760"/>
    </wire>
    <wire>
      <p1 x="1300" y="760"/>
      <p2 x="1340" y="760"/>
    </wire>
    <wire>
      <p1 x="620" y="760"/>
      <p2 x="720" y="760"/>
    </wire>
    <wire>
      <p1 x="720" y="760"/>
      <p2 x="740" y="760"/>
    </wire>
    <wire>
      <p1 x="960" y="120"/>
      <p2 x="980" y="120"/>
    </wire>
    <wire>
      <p1 x="60" y="380"/>
      <p2 x="200" y="380"/>
    </wire>
    <wire>
      <p1 x="800" y="380"/>
      <p2 x="820" y="380"/>
    </wire>
    <wire>
      <p1 x="1520" y="380"/>
      <p2 x="1620" y="380"/>
    </wire>
    <wire>
      <p1 x="2160" y="380"/>
      <p2 x="2180" y="380"/>
    </wire>
    <wire>
      <p1 x="2420" y="380"/>
      <p2 x="2560" y="380"/>
    </wire>
    <wire>
      <p1 x="1860" y="380"/>
      <p2 x="2120" y="380"/>
    </wire>
    <wire>
      <p1 x="3120" y="380"/>
      <p2 x="3200" y="380"/>
    </wire>
    <wire>
      <p1 x="3640" y="380"/>
      <p2 x="3720" y="380"/>
    </wire>
    <wire>
      <p1 x="3920" y="380"/>
      <p2 x="3980" y="380"/>
    </wire>
    <wire>
      <p1 x="820" y="380"/>
      <p2 x="960" y="380"/>
    </wire>
    <wire>
      <p1 x="1280" y="580"/>
      <p2 x="1280" y="600"/>
    </wire>
    <wire>
      <p1 x="1540" y="260"/>
      <p2 x="1540" y="300"/>
    </wire>
    <wire>
      <p1 x="1540" y="640"/>
      <p2 x="1540" y="720"/>
    </wire>
    <wire>
      <p1 x="1540" y="400"/>
      <p2 x="1540" y="560"/>
    </wire>
    <wire>
      <p1 x="1540" y="720"/>
      <p2 x="1540" y="800"/>
    </wire>
    <wire>
      <p1 x="2820" y="540"/>
      <p2 x="2820" y="620"/>
    </wire>
    <wire>
      <p1 x="4100" y="340"/>
      <p2 x="4100" y="540"/>
    </wire>
    <wire>
      <p1 x="3080" y="-60"/>
      <p2 x="3080" y="160"/>
    </wire>
    <wire>
      <p1 x="2060" y="460"/>
      <p2 x="2060" y="780"/>
    </wire>
    <wire>
      <p1 x="3340" y="-100"/>
      <p2 x="3340" y="0"/>
    </wire>
    <wire>
      <p1 x="3340" y="340"/>
      <p2 x="3340" y="1000"/>
    </wire>
    <wire>
      <p1 x="1040" y="300"/>
      <p2 x="1040" y="480"/>
    </wire>
    <wire>
      <p1 x="2320" y="480"/>
      <p2 x="2320" y="520"/>
    </wire>
    <wire>
      <p1 x="3600" y="360"/>
      <p2 x="3600" y="420"/>
    </wire>
    <wire>
      <p1 x="-20" y="380"/>
      <p2 x="-20" y="420"/>
    </wire>
    <wire>
      <p1 x="1300" y="320"/>
      <p2 x="1300" y="460"/>
    </wire>
    <wire>
      <p1 x="1300" y="560"/>
      <p2 x="1300" y="760"/>
    </wire>
    <wire>
      <p1 x="1560" y="240"/>
      <p2 x="1560" y="280"/>
    </wire>
    <wire>
      <p1 x="1560" y="420"/>
      <p2 x="1560" y="540"/>
    </wire>
    <wire>
      <p1 x="2840" y="560"/>
      <p2 x="2840" y="600"/>
    </wire>
    <wire>
      <p1 x="2840" y="680"/>
      <p2 x="2840" y="720"/>
    </wire>
    <wire>
      <p1 x="3100" y="520"/>
      <p2 x="3100" y="580"/>
    </wire>
    <wire>
      <p1 x="3100" y="-260"/>
      <p2 x="3100" y="180"/>
    </wire>
    <wire>
      <p1 x="2080" y="440"/>
      <p2 x="2080" y="700"/>
    </wire>
    <wire>
      <p1 x="2080" y="240"/>
      <p2 x="2080" y="420"/>
    </wire>
    <wire>
      <p1 x="3360" y="20"/>
      <p2 x="3360" y="40"/>
    </wire>
    <wire>
      <p1 x="3360" y="-220"/>
      <p2 x="3360" y="-180"/>
    </wire>
    <wire>
      <p1 x="3360" y="140"/>
      <p2 x="3360" y="180"/>
    </wire>
    <wire>
      <p1 x="1060" y="160"/>
      <p2 x="1060" y="260"/>
    </wire>
    <wire>
      <p1 x="1060" y="280"/>
      <p2 x="1060" y="440"/>
    </wire>
    <wire>
      <p1 x="3620" y="-60"/>
      <p2 x="3620" y="400"/>
    </wire>
    <wire>
      <p1 x="-40" y="220"/>
      <p2 x="-40" y="280"/>
    </wire>
    <wire>
      <p1 x="-40" y="280"/>
      <p2 x="-40" y="460"/>
    </wire>
    <wire>
      <p1 x="1320" y="340"/>
      <p2 x="1320" y="400"/>
    </wire>
    <wire>
      <p1 x="1320" y="440"/>
      <p2 x="1320" y="460"/>
    </wire>
    <wire>
      <p1 x="40" y="-240"/>
      <p2 x="40" y="0"/>
    </wire>
    <wire>
      <p1 x="2860" y="580"/>
      <p2 x="2860" y="1000"/>
    </wire>
    <wire>
      <p1 x="2860" y="140"/>
      <p2 x="2860" y="160"/>
    </wire>
    <wire>
      <p1 x="1580" y="580"/>
      <p2 x="1580" y="600"/>
    </wire>
    <wire>
      <p1 x="1580" y="200"/>
      <p2 x="1580" y="260"/>
    </wire>
    <wire>
      <p1 x="4140" y="300"/>
      <p2 x="4140" y="340"/>
    </wire>
    <wire>
      <p1 x="3120" y="500"/>
      <p2 x="3120" y="600"/>
    </wire>
    <wire>
      <p1 x="2100" y="320"/>
      <p2 x="2100" y="660"/>
    </wire>
    <wire>
      <p1 x="820" y="380"/>
      <p2 x="820" y="680"/>
    </wire>
    <wire>
      <p1 x="3380" y="100"/>
      <p2 x="3380" y="160"/>
    </wire>
    <wire>
      <p1 x="3380" y="-100"/>
      <p2 x="3380" y="-60"/>
    </wire>
    <wire>
      <p1 x="3380" y="160"/>
      <p2 x="3380" y="200"/>
    </wire>
    <wire>
      <p1 x="3640" y="-260"/>
      <p2 x="3640" y="380"/>
    </wire>
    <wire>
      <p1 x="1080" y="520"/>
      <p2 x="1080" y="540"/>
    </wire>
    <wire>
      <p1 x="-60" y="320"/>
      <p2 x="-60" y="640"/>
    </wire>
    <wire>
      <p1 x="60" y="260"/>
      <p2 x="60" y="380"/>
    </wire>
    <wire>
      <p1 x="1340" y="100"/>
      <p2 x="1340" y="280"/>
    </wire>
    <wire>
      <p1 x="1340" y="360"/>
      <p2 x="1340" y="420"/>
    </wire>
    <wire>
      <p1 x="1600" y="140"/>
      <p2 x="1600" y="220"/>
    </wire>
    <wire>
      <p1 x="1600" y="220"/>
      <p2 x="1600" y="240"/>
    </wire>
    <wire>
      <p1 x="4160" y="260"/>
      <p2 x="4160" y="1080"/>
    </wire>
    <wire>
      <p1 x="1860" y="180"/>
      <p2 x="1860" y="240"/>
    </wire>
    <wire>
      <p1 x="840" y="280"/>
      <p2 x="840" y="360"/>
    </wire>
    <wire>
      <p1 x="840" y="360"/>
      <p2 x="840" y="700"/>
    </wire>
    <wire>
      <p1 x="2120" y="260"/>
      <p2 x="2120" y="340"/>
    </wire>
    <wire>
      <p1 x="2120" y="380"/>
      <p2 x="2120" y="720"/>
    </wire>
    <wire>
      <p1 x="2120" y="720"/>
      <p2 x="2120" y="820"/>
    </wire>
    <wire>
      <p1 x="3400" y="20"/>
      <p2 x="3400" y="60"/>
    </wire>
    <wire>
      <p1 x="3660" y="260"/>
      <p2 x="3660" y="340"/>
    </wire>
    <wire>
      <p1 x="-80" y="0"/>
      <p2 x="-80" y="440"/>
    </wire>
    <wire>
      <p1 x="-80" y="440"/>
      <p2 x="-80" y="760"/>
    </wire>
    <wire>
      <p1 x="80" y="240"/>
      <p2 x="80" y="260"/>
    </wire>
    <wire>
      <p1 x="1360" y="180"/>
      <p2 x="1360" y="440"/>
    </wire>
    <wire>
      <p1 x="2640" y="200"/>
      <p2 x="2640" y="400"/>
    </wire>
    <wire>
      <p1 x="3920" y="240"/>
      <p2 x="3920" y="280"/>
    </wire>
    <wire>
      <p1 x="1620" y="620"/>
      <p2 x="1620" y="640"/>
    </wire>
    <wire>
      <p1 x="1620" y="780"/>
      <p2 x="1620" y="800"/>
    </wire>
    <wire>
      <p1 x="1620" y="700"/>
      <p2 x="1620" y="720"/>
    </wire>
    <wire>
      <p1 x="1880" y="200"/>
      <p2 x="1880" y="260"/>
    </wire>
    <wire>
      <p1 x="3160" y="-120"/>
      <p2 x="3160" y="220"/>
    </wire>
    <wire>
      <p1 x="3160" y="280"/>
      <p2 x="3160" y="420"/>
    </wire>
    <wire>
      <p1 x="3160" y="420"/>
      <p2 x="3160" y="560"/>
    </wire>
    <wire>
      <p1 x="2140" y="360"/>
      <p2 x="2140" y="640"/>
    </wire>
    <wire>
      <p1 x="860" y="360"/>
      <p2 x="860" y="400"/>
    </wire>
    <wire>
      <p1 x="3420" y="140"/>
      <p2 x="3420" y="160"/>
    </wire>
    <wire>
      <p1 x="1380" y="-140"/>
      <p2 x="1380" y="-100"/>
    </wire>
    <wire>
      <p1 x="2660" y="580"/>
      <p2 x="2660" y="680"/>
    </wire>
    <wire>
      <p1 x="2660" y="240"/>
      <p2 x="2660" y="280"/>
    </wire>
    <wire>
      <p1 x="3940" y="220"/>
      <p2 x="3940" y="300"/>
    </wire>
    <wire>
      <p1 x="620" y="760"/>
      <p2 x="620" y="1000"/>
    </wire>
    <wire>
      <p1 x="3180" y="-200"/>
      <p2 x="3180" y="400"/>
    </wire>
    <wire>
      <p1 x="2160" y="300"/>
      <p2 x="2160" y="380"/>
    </wire>
    <wire>
      <p1 x="3440" y="300"/>
      <p2 x="3440" y="320"/>
    </wire>
    <wire>
      <p1 x="2420" y="220"/>
      <p2 x="2420" y="300"/>
    </wire>
    <wire>
      <p1 x="2420" y="380"/>
      <p2 x="2420" y="440"/>
    </wire>
    <wire>
      <p1 x="3700" y="220"/>
      <p2 x="3700" y="320"/>
    </wire>
    <wire>
      <p1 x="-120" y="-200"/>
      <p2 x="-120" y="-180"/>
    </wire>
    <wire>
      <p1 x="2680" y="220"/>
      <p2 x="2680" y="280"/>
    </wire>
    <wire>
      <p1 x="2680" y="280"/>
      <p2 x="2680" y="400"/>
    </wire>
    <wire>
      <p1 x="2680" y="400"/>
      <p2 x="2680" y="640"/>
    </wire>
    <wire>
      <p1 x="1400" y="-140"/>
      <p2 x="1400" y="-80"/>
    </wire>
    <wire>
      <p1 x="1400" y="560"/>
      <p2 x="1400" y="700"/>
    </wire>
    <wire>
      <p1 x="3960" y="260"/>
      <p2 x="3960" y="360"/>
    </wire>
    <wire>
      <p1 x="1660" y="560"/>
      <p2 x="1660" y="600"/>
    </wire>
    <wire>
      <p1 x="640" y="800"/>
      <p2 x="640" y="920"/>
    </wire>
    <wire>
      <p1 x="3200" y="0"/>
      <p2 x="3200" y="380"/>
    </wire>
    <wire>
      <p1 x="900" y="640"/>
      <p2 x="900" y="800"/>
    </wire>
    <wire>
      <p1 x="900" y="340"/>
      <p2 x="900" y="400"/>
    </wire>
    <wire>
      <p1 x="2180" y="280"/>
      <p2 x="2180" y="340"/>
    </wire>
    <wire>
      <p1 x="2180" y="460"/>
      <p2 x="2180" y="540"/>
    </wire>
    <wire>
      <p1 x="2180" y="540"/>
      <p2 x="2180" y="600"/>
    </wire>
    <wire>
      <p1 x="2440" y="400"/>
      <p2 x="2440" y="580"/>
    </wire>
    <wire>
      <p1 x="3720" y="180"/>
      <p2 x="3720" y="280"/>
    </wire>
    <wire>
      <p1 x="-140" y="-140"/>
      <p2 x="-140" y="340"/>
    </wire>
    <wire>
      <p1 x="1420" y="-200"/>
      <p2 x="1420" y="-180"/>
    </wire>
    <wire>
      <p1 x="1420" y="-140"/>
      <p2 x="1420" y="-120"/>
    </wire>
    <wire>
      <p1 x="1420" y="520"/>
      <p2 x="1420" y="540"/>
    </wire>
    <wire>
      <p1 x="2700" y="300"/>
      <p2 x="2700" y="720"/>
    </wire>
    <wire>
      <p1 x="3980" y="280"/>
      <p2 x="3980" y="380"/>
    </wire>
    <wire>
      <p1 x="400" y="320"/>
      <p2 x="400" y="340"/>
    </wire>
    <wire>
      <p1 x="1680" y="540"/>
      <p2 x="1680" y="680"/>
    </wire>
    <wire>
      <p1 x="660" y="680"/>
      <p2 x="660" y="840"/>
    </wire>
    <wire>
      <p1 x="3220" y="20"/>
      <p2 x="3220" y="340"/>
    </wire>
    <wire>
      <p1 x="920" y="300"/>
      <p2 x="920" y="540"/>
    </wire>
    <wire>
      <p1 x="920" y="720"/>
      <p2 x="920" y="820"/>
    </wire>
    <wire>
      <p1 x="2200" y="380"/>
      <p2 x="2200" y="400"/>
    </wire>
    <wire>
      <p1 x="-160" y="-220"/>
      <p2 x="-160" y="-180"/>
    </wire>
    <wire>
      <p1 x="2720" y="320"/>
      <p2 x="2720" y="740"/>
    </wire>
    <wire>
      <p1 x="1440" y="-140"/>
      <p2 x="1440" y="-120"/>
    </wire>
    <wire>
      <p1 x="1440" y="-220"/>
      <p2 x="1440" y="-180"/>
    </wire>
    <wire>
      <p1 x="4000" y="320"/>
      <p2 x="4000" y="900"/>
    </wire>
    <wire>
      <p1 x="420" y="260"/>
      <p2 x="420" y="300"/>
    </wire>
    <wire>
      <p1 x="1700" y="520"/>
      <p2 x="1700" y="760"/>
    </wire>
    <wire>
      <p1 x="680" y="700"/>
      <p2 x="680" y="820"/>
    </wire>
    <wire>
      <p1 x="3240" y="60"/>
      <p2 x="3240" y="80"/>
    </wire>
    <wire>
      <p1 x="3240" y="80"/>
      <p2 x="3240" y="360"/>
    </wire>
    <wire>
      <p1 x="940" y="320"/>
      <p2 x="940" y="420"/>
    </wire>
    <wire>
      <p1 x="2220" y="480"/>
      <p2 x="2220" y="740"/>
    </wire>
    <wire>
      <p1 x="2740" y="640"/>
      <p2 x="2740" y="760"/>
    </wire>
    <wire>
      <p1 x="440" y="-220"/>
      <p2 x="440" y="-100"/>
    </wire>
    <wire>
      <p1 x="440" y="-100"/>
      <p2 x="440" y="320"/>
    </wire>
    <wire>
      <p1 x="700" y="720"/>
      <p2 x="700" y="780"/>
    </wire>
    <wire>
      <p1 x="700" y="300"/>
      <p2 x="700" y="400"/>
    </wire>
    <wire>
      <p1 x="700" y="400"/>
      <p2 x="700" y="460"/>
    </wire>
    <wire>
      <p1 x="3260" y="300"/>
      <p2 x="3260" y="360"/>
    </wire>
    <wire>
      <p1 x="960" y="300"/>
      <p2 x="960" y="380"/>
    </wire>
    <wire>
      <p1 x="2240" y="360"/>
      <p2 x="2240" y="540"/>
    </wire>
    <wire>
      <p1 x="200" y="-120"/>
      <p2 x="200" y="260"/>
    </wire>
    <wire>
      <p1 x="200" y="380"/>
      <p2 x="200" y="420"/>
    </wire>
    <wire>
      <p1 x="200" y="260"/>
      <p2 x="200" y="300"/>
    </wire>
    <wire>
      <p1 x="2760" y="660"/>
      <p2 x="2760" y="780"/>
    </wire>
    <wire>
      <p1 x="1480" y="-180"/>
      <p2 x="1480" y="-160"/>
    </wire>
    <wire>
      <p1 x="460" y="220"/>
      <p2 x="460" y="240"/>
    </wire>
    <wire>
      <p1 x="460" y="280"/>
      <p2 x="460" y="640"/>
    </wire>
    <wire>
      <p1 x="460" y="240"/>
      <p2 x="460" y="260"/>
    </wire>
    <wire>
      <p1 x="720" y="520"/>
      <p2 x="720" y="760"/>
    </wire>
    <wire>
      <p1 x="720" y="180"/>
      <p2 x="720" y="280"/>
    </wire>
    <wire>
      <p1 x="3280" y="240"/>
      <p2 x="3280" y="300"/>
    </wire>
    <wire>
      <p1 x="2000" y="420"/>
      <p2 x="2000" y="480"/>
    </wire>
    <wire>
      <p1 x="980" y="120"/>
      <p2 x="980" y="340"/>
    </wire>
    <wire>
      <p1 x="980" y="360"/>
      <p2 x="980" y="1040"/>
    </wire>
    <wire>
      <p1 x="3540" y="260"/>
      <p2 x="3540" y="720"/>
    </wire>
    <wire>
      <p1 x="2260" y="-120"/>
      <p2 x="2260" y="440"/>
    </wire>
    <wire>
      <p1 x="2260" y="440"/>
      <p2 x="2260" y="580"/>
    </wire>
    <wire>
      <p1 x="2520" y="180"/>
      <p2 x="2520" y="200"/>
    </wire>
    <wire>
      <p1 x="2520" y="500"/>
      <p2 x="2520" y="620"/>
    </wire>
    <wire>
      <p1 x="1240" y="720"/>
      <p2 x="1240" y="740"/>
    </wire>
    <wire>
      <p1 x="-220" y="-240"/>
      <p2 x="-220" y="-160"/>
    </wire>
    <wire>
      <p1 x="2780" y="700"/>
      <p2 x="2780" y="900"/>
    </wire>
    <wire>
      <p1 x="4060" y="380"/>
      <p2 x="4060" y="1040"/>
    </wire>
    <wire>
      <p1 x="2020" y="340"/>
      <p2 x="2020" y="920"/>
    </wire>
    <wire>
      <p1 x="3300" y="220"/>
      <p2 x="3300" y="280"/>
    </wire>
    <wire>
      <p1 x="1000" y="200"/>
      <p2 x="1000" y="260"/>
    </wire>
    <wire>
      <p1 x="1000" y="320"/>
      <p2 x="1000" y="900"/>
    </wire>
    <wire>
      <p1 x="2280" y="160"/>
      <p2 x="2280" y="420"/>
    </wire>
    <wire>
      <p1 x="2280" y="420"/>
      <p2 x="2280" y="560"/>
    </wire>
    <wire>
      <p1 x="2280" y="560"/>
      <p2 x="2280" y="1080"/>
    </wire>
    <wire>
      <p1 x="2540" y="420"/>
      <p2 x="2540" y="580"/>
    </wire>
    <wire>
      <p1 x="1520" y="540"/>
      <p2 x="1520" y="660"/>
    </wire>
    <wire>
      <p1 x="1520" y="380"/>
      <p2 x="1520" y="520"/>
    </wire>
    <wire>
      <p1 x="500" y="400"/>
      <p2 x="500" y="440"/>
    </wire>
    <wire>
      <p1 x="2040" y="440"/>
      <p2 x="2040" y="760"/>
    </wire>
    <wire>
      <p1 x="1020" y="240"/>
      <p2 x="1020" y="520"/>
    </wire>
    <wire>
      <p1 x="2300" y="220"/>
      <p2 x="2300" y="400"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>